/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Picasso
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from "zod";

/**
 * @summary Upload filters
 */
export const uploadFiltersApiFilterPost200ResponseFiltersItemReportCountMin = 0;

export const uploadFiltersApiFilterPost200Response = zod.object({
    filters: zod
        .array(
            zod.object({
                filterId: zod.string(),
                authorId: zod.string(),
                imgId: zod.string(),
                imgURL: zod.string().url().min(1),
                blurImgURL: zod.string().url().min(1),
                smallImgURL: zod.string().url().min(1),
                isOfficial: zod.boolean(),
                isBanned: zod.boolean(),
                reportCount: zod
                    .number()
                    .min(
                        uploadFiltersApiFilterPost200ResponseFiltersItemReportCountMin,
                    ),
            }),
        )
        .min(1),
});

export const uploadFiltersApiFilterPost201ResponseFiltersItemReportCountMin = 0;

export const uploadFiltersApiFilterPost201Response = zod.object({
    filters: zod
        .array(
            zod.object({
                filterId: zod.string(),
                authorId: zod.string(),
                imgId: zod.string(),
                imgURL: zod.string().url().min(1),
                blurImgURL: zod.string().url().min(1),
                smallImgURL: zod.string().url().min(1),
                isOfficial: zod.boolean(),
                isBanned: zod.boolean(),
                reportCount: zod
                    .number()
                    .min(
                        uploadFiltersApiFilterPost201ResponseFiltersItemReportCountMin,
                    ),
            }),
        )
        .min(1),
});

export const uploadFiltersApiFilterPost400Response = zod
    .object({
        reason: zod.string(),
        message: zod.string(),
        errors: zod.array(zod.any()),
    })
    .or(
        zod.object({
            reason: zod.string(),
            message: zod.string(),
        }),
    );

export const uploadFiltersApiFilterPost401Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

export const uploadFiltersApiFilterPost413Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

export const uploadFiltersApiFilterPost415Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

export const uploadFiltersApiFilterPost422Response = zod.object({
    detail: zod
        .array(
            zod.object({
                loc: zod.array(zod.string().or(zod.number())),
                msg: zod.string(),
                type: zod.string(),
            }),
        )
        .optional(),
});

export const uploadFiltersApiFilterPost500Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

/**
 * @summary Delete multiple style filters
 */
export const deleteFiltersApiFilterDeleteQueryParams = zod.object({
    filterId: zod.array(zod.string().uuid()).min(1),
});

export const deleteFiltersApiFilterDelete400Response = zod
    .object({
        reason: zod.string(),
        message: zod.string(),
        errors: zod.array(zod.any()),
    })
    .or(
        zod.object({
            reason: zod.string(),
            message: zod.string(),
        }),
    );

export const deleteFiltersApiFilterDelete401Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

export const deleteFiltersApiFilterDelete403Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

export const deleteFiltersApiFilterDelete422Response = zod.object({
    detail: zod
        .array(
            zod.object({
                loc: zod.array(zod.string().or(zod.number())),
                msg: zod.string(),
                type: zod.string(),
            }),
        )
        .optional(),
});

export const deleteFiltersApiFilterDelete500Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

/**
 * @summary Get style filters
 */
export const getStyleFiltersApiFilterGetQueryLimitMin = 0;

export const getStyleFiltersApiFilterGetQueryLimitMax = 100;
export const getStyleFiltersApiFilterGetQueryOffsetMin = 0;

export const getStyleFiltersApiFilterGetQueryParams = zod.object({
    limit: zod
        .number()
        .min(getStyleFiltersApiFilterGetQueryLimitMin)
        .max(getStyleFiltersApiFilterGetQueryLimitMax)
        .optional(),
    offset: zod.number().min(getStyleFiltersApiFilterGetQueryOffsetMin).optional(),
    authorId: zod.string().uuid().or(zod.null()).optional(),
});

export const getStyleFiltersApiFilterGet200ResponseFiltersItemReportCountMin = 0;
export const getStyleFiltersApiFilterGet200ResponseTotalMin = 0;

export const getStyleFiltersApiFilterGet200Response = zod.object({
    filters: zod
        .array(
            zod.object({
                filterId: zod.string(),
                authorId: zod.string(),
                imgId: zod.string(),
                imgURL: zod.string().url().min(1),
                blurImgURL: zod.string().url().min(1),
                smallImgURL: zod.string().url().min(1),
                isOfficial: zod.boolean(),
                isBanned: zod.boolean(),
                reportCount: zod
                    .number()
                    .min(
                        getStyleFiltersApiFilterGet200ResponseFiltersItemReportCountMin,
                    ),
            }),
        )
        .min(1),
    total: zod.number().min(getStyleFiltersApiFilterGet200ResponseTotalMin),
});

export const getStyleFiltersApiFilterGet400Response = zod
    .object({
        reason: zod.string(),
        message: zod.string(),
        errors: zod.array(zod.any()),
    })
    .or(
        zod.object({
            reason: zod.string(),
            message: zod.string(),
        }),
    );

export const getStyleFiltersApiFilterGet401Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

export const getStyleFiltersApiFilterGet422Response = zod.object({
    detail: zod
        .array(
            zod.object({
                loc: zod.array(zod.string().or(zod.number())),
                msg: zod.string(),
                type: zod.string(),
            }),
        )
        .optional(),
});

export const getStyleFiltersApiFilterGet500Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

/**
 * @summary Report a filter and if it's report count is above threshold then ban it
 */
export const reportStyleFilterApiFilterFilterIdReportPatchParams = zod.object({
    filter_id: zod.string().uuid(),
});

export const reportStyleFilterApiFilterFilterIdReportPatchQueryParams = zod.object({
    type: zod.enum(["increment", "decrement"]),
});

export const reportStyleFilterApiFilterFilterIdReportPatch200Response = zod.object({
    is_banned: zod.boolean().optional(),
});

export const reportStyleFilterApiFilterFilterIdReportPatch400Response = zod
    .object({
        reason: zod.string(),
        message: zod.string(),
        errors: zod.array(zod.any()),
    })
    .or(
        zod.object({
            reason: zod.string(),
            message: zod.string(),
        }),
    );

export const reportStyleFilterApiFilterFilterIdReportPatch401Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});

export const reportStyleFilterApiFilterFilterIdReportPatch422Response = zod.object({
    detail: zod
        .array(
            zod.object({
                loc: zod.array(zod.string().or(zod.number())),
                msg: zod.string(),
                type: zod.string(),
            }),
        )
        .optional(),
});

export const reportStyleFilterApiFilterFilterIdReportPatch500Response = zod.object({
    reason: zod.string(),
    message: zod.string(),
});
